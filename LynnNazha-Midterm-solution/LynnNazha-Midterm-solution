import json
import requests



allTabs = []


def addNewLine():
  print('\n')


def validateSelectedChoice(choice):
  if choice.isnumeric() and (0 < int(choice) < 10):
    applySelectedChoice(int(choice))
  else:
    print('Please enter a valid choice to proceed !')
    main()
    validateSelectedChoice(input())


def applySelectedChoice(choice):
  if choice == 1:
    openTab()
  elif choice == 2:
    closeTab()
  elif choice == 3:
    switchTab()
  elif choice == 4:
    displayAllTabs()
  elif choice == 5:
    openNestedTabs()
  elif choice == 6:
    clearAllTabs()
  elif choice == 7:
    saveTabs()
  elif choice == 8:
    importTabs()
  elif choice == 9:
    exitApplication()


def getNonEmptyInput(text):
  value = input(text)
  if value:
    return value
  else:
    return getNonEmptyInput(text)


def getValidTabIndex(text):
  index = input(text)
  if not index:
    return len(allTabs) - 1
  elif index.isnumeric() and 0 <= int(index) < len(allTabs):
    return int(index)
  else:
    return getValidTabIndex(text)


def openTab():
  title = getNonEmptyInput('Enter the title of the tab to open: ')
  url = getNonEmptyInput('Enter the url of the tab to open: ')
  #Check if the URL is valid or not
  allTabs.append({'title': title, 'url': url, 'nestedTabs': []})
  print('The tab is opened successfully !')
  main()


def closeTab():
  if (len(allTabs) > 0):
    tabIndex = getValidTabIndex('Enter the index of the tab to close: ')
    del allTabs[tabIndex]
    addNewLine()
    print('The tab at index ', tabIndex, ' is closed successfully!')
    main()
  else:
    print('There is no tab to close !')
    main()


def switchTab():
  if (len(allTabs) > 0):
    tabIndex = getValidTabIndex('Enter the index of the tab to display: ')
    addNewLine()
    print('Title : ', allTabs[tabIndex]['title'])
    print('URL : ', allTabs[tabIndex]['url'])
    print('URL HTML Content:')
    addNewLine()
    print(requests.get(allTabs[tabIndex]['url']).text)
    main()
  else:
    print('There is no tab to display !')
    main()


def displayAllTabs():
  if (len(allTabs) > 0):
    addNewLine()
    for index, tab in enumerate(allTabs):
      print('Tab ', index, ' : ', tab['title'])
      if (len(tab['nestedTabs']) > 0):
        for nestedTab in tab['nestedTabs']:
          print('---- ', nestedTab['title'])
    main()
  else:
    print('There is no tabs to display!')
    main()


def openNestedTabs():
  tabIndex = getValidTabIndex(
      'Enter the index of the tab to open nested tabs: ')
  title = getNonEmptyInput('Enter the title of the tab to open: ')
  url = getNonEmptyInput('Enter the url of the tab to open: ')
  #Check if the URL is valid or not
  allTabs[tabIndex]['nestedTabs'].append({'title': title, 'url': url})
  print('This tab is added under the parent tab with index ', tabIndex)
  main()


def clearAllTabs():
  allTabs.clear()
  print('All the tabs are deleted!')
  main()


def saveTabs():
  filePath = getNonEmptyInput('Enter the file path to save the tabs: ')
  with open(filePath, 'w') as file:
    json.dump(allTabs, file)
  print('The tabs are saved successfully!')
  main()


def importTabs():
  print('Import tabs activated')


def exitApplication():
  print('Exit the application')


def main():
  addNewLine()
  print('1. Open Tab')
  print('2. Close Tab')
  print('3. Switch Tab')
  print('4. Display All Tabs')
  print('5. Open Nested Tab')
  print('6. Clear All Tabs')
  print('7. Save Tabs')
  print('8. Import Tabs')
  print('9. Exit')
  addNewLine()
  print('Please enter your choice: ')
  validateSelectedChoice(input())


print('Welcome to the advanced browser tabs simulation.')
main()
